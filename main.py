import os
import logging
from fastapi import FastAPI, HTTPException, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É static –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('static', exist_ok=True)

app = FastAPI(
    title="Umbrent Website",
    description="–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–µ–±-—Å–∞–π—Ç",
    version="1.0.0",
    docs_url=None,
    redoc_url=None,
    debug=os.getenv('FASTAPI_DEBUG', 'False').lower() == 'true'
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/assets", StaticFiles(directory="static"), name="assets")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('static/index.html'):
    logger.info("Creating default index.html")
    with open('static/index.html', 'w') as f:
        f.write("""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Umbrent Website</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: Arial, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
        }
        .container {
            text-align: center;
            background: rgba(255,255,255,0.1);
            padding: 3rem;
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }
        h1 { margin-bottom: 1rem; font-size: 2.5rem; }
        p { margin-bottom: 2rem; font-size: 1.2rem; }
        .status { 
            background: rgba(255,255,255,0.2); 
            padding: 0.5rem 1.5rem; 
            border-radius: 20px; 
            display: inline-block;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Umbrent Website</h1>
        <p>–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</p>
        <div class="status">–°—Ç–∞—Ç—É—Å: <strong>–†–∞–±–æ—Ç–∞–µ—Ç</strong></div>
        <div style="margin-top: 2rem; font-size: 0.9rem;">
            <p>–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: <span id="time"></span></p>
        </div>
    </div>
    <script>
        document.getElementById('time').textContent = new Date().toLocaleString('ru-RU');
    </script>
</body>
</html>""")


@app.get("/")
async def serve_index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    logger.info('Serving index.html')
    if not os.path.exists('static/index.html'):
        return JSONResponse(
            content={"message": "Website is running", "status": "healthy"},
            status_code=200
        )
    return FileResponse('static/index.html')


@app.get("/health")
async def health_check():
    """Health check endpoint"""
    logger.info('Health check requested')
    return {
        "status": "healthy",
        "service": "umbrent-website",
        "version": "1.0.0"
    }


@app.api_route("/{path:path}", methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"])
async def handle_all_paths(request: Request, path: str = ""):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø—É—Ç–µ–π"""

    # Health check –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if path == "health":
        return await health_check()

    # –ï—Å–ª–∏ –ø—É—Ç—å –ø—É—Å—Ç–æ–π –∏–ª–∏ –∫–æ—Ä–Ω–µ–≤–æ–π - –æ—Ç–¥–∞–µ–º index.html
    if path in ["", "/"]:
        return await serve_index()

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
    file_path = f"static/{path}"

    # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –∏—â–µ–º index.html –≤–Ω—É—Ç—Ä–∏
    if os.path.isdir(file_path):
        index_path = os.path.join(file_path, "index.html")
        if os.path.exists(index_path):
            return FileResponse(index_path)
        else:
            logger.warning(f"Directory index not found: {file_path}")
            raise HTTPException(status_code=404, detail="Directory index not found")

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—Ç–¥–∞–µ–º –µ–≥–æ
    if os.path.exists(file_path) and os.path.isfile(file_path):
        logger.info(f'Serving static file: {path}')
        return FileResponse(file_path)

    # –î–ª—è API –º–µ—Ç–æ–¥–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –æ—à–∏–±–∫—É
    if request.method != "GET":
        logger.info(f'Handling {request.method} method for path: {path}')
        return JSONResponse(
            content={"error": "Method not allowed", "path": path},
            status_code=405
        )

    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ—Ç–¥–∞–µ–º 404
    logger.warning(f"File not found: {file_path}")
    raise HTTPException(status_code=404, detail="File not found")


@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç JSON - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
    if "application/json" in request.headers.get("accept", ""):
        return JSONResponse(
            status_code=404,
            content={"error": "Not found", "path": request.url.path}
        )

    # –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é 404 —Å—Ç—Ä–∞–Ω–∏—Ü—É
    custom_404 = "static/404.html"
    if os.path.exists(custom_404):
        return FileResponse(custom_404, status_code=404)

    # –ò–ª–∏ –æ—Ç–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
    html_content = """
    <html>
        <body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
            <h1>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
            <p>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>
            <p><a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a></p>
        </body>
    </html>
    """
    return JSONResponse(content=html_content, status_code=404, media_type="text/html")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"Global exception handler: {str(exc)}")
    return JSONResponse(
        status_code=500,
        content={"error": "Internal server error", "message": str(exc)}
    )